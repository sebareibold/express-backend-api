// Punto de entrada principal del servidor
const http = require("./src/server");
const productManager = require("./src//managers/ProductsManager");
const cartsManager = require("./src//managers/CartsManager");
const mongoose = require("mongoose");

// Puerto del servidor
const PORT = process.env.PORT || 8080;

// Funci√≥n para inicializar el servidor
const initializeServer = async () => {
  try {
    // Inicializar managers
    await productManager.init();
    await cartsManager.init();

    // Iniciar el servidor HTTP
    http.listen(PORT, () => {
      console.log("=".repeat(50));

      console.log("üöÄ ¬°Servidor iniciado exitosamente!");
      console.log(`üì° Puerto: ${PORT}`);
      console.log(`üåê URL: http://localhost:${PORT}`);
      console.log(`üõçÔ∏è  Productos: http://localhost:${PORT}/`);
      console.log(`‚ö° Tiempo real: http://localhost:${PORT}/realtimeproducts`);
      console.log(`üìã API Productos: http://localhost:${PORT}/api/products`);
      console.log(`üõí API Carritos: http://localhost:${PORT}/api/carts`);
      console.log("=".repeat(50));
    });
  } catch (error) {
    console.error("‚ùå Error al inicializar el servidor:", error);
    process.exit(1);
  }
};

// Manejar la conexi√≥n a MongoDB
mongoose.connection.once("open", () => {
  console.log("‚úÖ MongoDB Conectado Exitosamente!");
  initializeServer();
});

mongoose.connection.on("error", (error) => {
  console.error("‚ùå Error de conexi√≥n a MongoDB:", error);
});

mongoose.connection.on("disconnected", () => {
  console.log("‚ö†Ô∏è MongoDB desconectado");
});
